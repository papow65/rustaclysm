[package]
name = "rustaclysm"
version = "0.1.0"
description = "A 3D reimplementation of Cataclysm: Dark Days Ahead using Bevy"
license = "AGPL-3.0-or-later"
readme = "readme.md"
repository = "https://github.com/papow65/rustaclysm"
authors = [ "papow65 <papow65@protonmail.com>" ]
exclude = [ "/screenshots/" ]
edition = "2024"
rust-version = "1.86" # should be latest stable

[workspace]
# List internal dependencies: cargo tree | rg rustaclysm
members = [ "crates/*" ]

[dependencies]
base64 = "0.22"
bevy = { workspace = true }
bresenham = "0.1"
cdda_json_files = { path = "crates/cdda_json_files" }
either = { workspace = true }
fastrand = { workspace = true }
float-ord = "0.3"
git-version = "0.3"
glob = "0.3"
hud = { path = "crates/hud" }
keyboard = { path = "crates/keyboard" }
manual = { path = "crates/manual" }
pathfinding = { workspace = true }
regex = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
strum = { workspace = true }
thread_local = "1"
units = { path = "crates/units" }
util = { path = "crates/util" }

[workspace.dependencies]
# We limit this list to crates that are used in multiple crates.
bevy = { git = "https://github.com/bevyengine/bevy.git", rev = "e02c3662fb6b2c801118f21e3caa89fe5371a4a6", default-features = false, features = [ "async_executor", "bevy_asset", "bevy_dev_tools", "bevy_log", "bevy_pbr", "bevy_state", "bevy_text", "bevy_ui", "bevy_window", "multi_threaded", "png", "std", "tonemapping_luts", "wayland" ] }
bevy_log = { git = "https://github.com/bevyengine/bevy.git", rev = "e02c3662fb6b2c801118f21e3caa89fe5371a4a6" }
bevy_platform_support = { git = "https://github.com/bevyengine/bevy.git", rev = "e02c3662fb6b2c801118f21e3caa89fe5371a4a6" }
either = "1"
fastrand = "2"
pathfinding = "4"
regex = "1"
serde = { version = "1", features = ["derive", "rc" ] }
serde_json = "1"
strum = { version = "0.27", features = ["derive"] }

[features]
# We use --no-default-features for production builds. See .github/workflows/ci.yml
default = ["bevy/dynamic_linking"]

[profile.dev-opt] # Used in development, with performance similar to release
inherits = "dev"
opt-level = 3 # inspired by https://bevy-cheatbook.github.io/pitfalls/performance.html

[profile.release]
debug = "line-tables-only" # For useful bug reports
lto = "thin"
panic = 'abort'

[lints]
workspace = true

[workspace.lints.rust]
# Forbidden groups
rust-2021-compatibility = { level = "forbid", priority = -1 }
rust-2024-compatibility = { level = "forbid", priority = -1 }
# Denied groups
rust-2018-idioms = { level = "deny", priority = -1 }
# Forbidden lints
absolute_paths_not_starting_with_crate = "forbid"
ambiguous_associated_items = "forbid"
anonymous_parameters = "forbid"
array_into_iter = "forbid"
bare_trait_objects = "forbid"
coherence_leak_check = "forbid"
conflicting_repr_hints = "forbid"
const_evaluatable_unchecked = "forbid"
deref_into_dyn_supertrait = "forbid"
ellipsis_inclusive_range_patterns = "forbid"
explicit_outlives_requirements = "forbid"
forbidden_lint_groups = "forbid"
ill_formed_attribute_input = "forbid"
invalid_doc_attributes = "forbid"
invalid_type_param_default = "forbid"
keyword_idents_2018 = "forbid"
late_bound_lifetime_arguments = "forbid"
legacy_derive_helpers = "forbid"
macro_expanded_macro_exports_accessed_by_absolute_paths = "forbid"
missing_fragment_specifier = "forbid"
non_fmt_panics = "forbid"
non_snake_case = "forbid"
order_dependent_trait_objects = "forbid"
patterns_in_fns_without_body = "forbid"
private_interfaces = "forbid"
private_bounds = "forbid"
proc_macro_derive_resolution_fallback = "forbid"
pub_use_of_private_extern_crate = "forbid"
rust_2021_incompatible_closure_captures = "forbid"
rust_2021_incompatible_or_patterns = "forbid"
rust_2021_prefixes_incompatible_syntax = "forbid"
rust_2021_prelude_collisions = "forbid"
semicolon_in_expressions_from_macros = "forbid"
soft_unstable = "forbid"
tyvar_behind_raw_pointer = "forbid"
uninhabited_static = "forbid"
unsafe_code = "forbid"
unstable_name_collisions = "forbid"
# Denied
non_camel_case_types = "deny"
non_upper_case_globals = "deny"
unreachable_code = "deny"
unreachable_pub = "deny"
unused_attributes = "deny"
unused_macros = "deny"
# Warned
dead_code = "warn"
# Allow
elided_lifetimes_in_paths = "allow" # See https://github.com/rust-lang/rust/issues/91639
if_let_rescope = "allow"

[workspace.lints.clippy]
# Denied categories
complexity = { level = "deny", priority = -1 }
correctness = { level = "deny", priority = -1 }
nursery = { level = "deny", priority = -1 }
pedantic = { level = "deny", priority = -1 }
perf = { level = "deny", priority = -1 }
style = { level = "deny", priority = -1 }
suspicious = { level = "deny", priority = -1 }
# Denied lints from allowed categories
allow_attributes = "deny"
as_underscore = "deny"
assertions_on_result_states = "deny"
dbg_macro = "deny"
deref_by_slicing = "deny"
disallowed_script_idents = "deny"
if_then_some_else_none = "deny"
infinite_loop = "deny"
missing_assert_message = "deny"
mixed_read_write_in_expression = "deny"
modulo_arithmetic = "deny"
mutex_integer = "deny"
non_zero_suggestions = "deny"
pathbuf_init_then_push = "deny"
semicolon_inside_block = "deny"
str_to_string = "deny"
string_lit_chars_any = "deny"
string_slice = "deny"
string_to_string = "deny"
tests_outside_test_module = "deny"
unwrap_used = "deny"
unneeded_field_pattern = "deny"
unseparated_literal_suffix = "deny"
unused_result_ok = "deny"
unused_trait_names = "deny"
verbose_file_reads = "deny"
# Exceptions for allowed lints from denied categories
cast_possible_truncation = { level = "allow", priority = 1 }
cast_precision_loss = { level = "allow", priority = 1 }
cast_possible_wrap = { level = "allow", priority = 1 }
cast_sign_loss = { level = "allow", priority = 1 }
derive_partial_eq_without_eq = { level = "allow", priority = 1 } # Not needed
match_wildcard_for_single_variants = { level = "allow", priority = 1 }
missing_const_for_fn = { level = "allow", priority = 1 } # False positives in rust 1.86
missing_panics_doc = { level = "allow", priority = 1 }
module_name_repetitions = { level = "allow", priority = 1 }
option_if_let_else = { level = "allow", priority = 1 } # Often bad for readability
redundant_else = { level = "allow", priority = 1 }
redundant_pub_crate = { level = "allow", priority = 1 } # Less clear
significant_drop_tightening = { level = "allow", priority = 1 } # False positives
similar_names = { level = "allow", priority = 1 }
struct_field_names = { level = "allow", priority = 1 } # Doens't work well with CDDA data
suboptimal_flops = { level = "allow", priority = 1 } # Less clear
too_many_arguments = { level = "allow", priority = 1 } # Doesn't work well with bevy
trivially_copy_pass_by_ref = { level = "allow", priority = 1 }
type_complexity = { level = "allow", priority = 1 } # Doesn't work well with bevy
